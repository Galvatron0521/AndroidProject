package com.qgw.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shdjrmyy.qgw.CompanyProject.HomePage.bean.SfBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SF_BEAN".
*/
public class SfBeanDao extends AbstractDao<SfBean, Long> {

    public static final String TABLENAME = "SF_BEAN";

    /**
     * Properties of entity SfBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Date = new Property(1, long.class, "date", false, "DATE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Hz = new Property(4, long.class, "hz", false, "HZ");
    }


    public SfBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SfBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SF_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DATE\" INTEGER NOT NULL ," + // 1: date
                "\"TITLE\" TEXT," + // 2: title
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"HZ\" INTEGER NOT NULL );"); // 4: hz
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SF_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SfBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDate());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getHz());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SfBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDate());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getHz());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SfBean readEntity(Cursor cursor, int offset) {
        SfBean entity = new SfBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // type
            cursor.getLong(offset + 4) // hz
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SfBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setHz(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SfBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SfBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SfBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

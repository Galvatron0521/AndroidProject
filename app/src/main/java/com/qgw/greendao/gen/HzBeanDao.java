package com.qgw.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shdjrmyy.qgw.CompanyProject.HomePage.bean.HzBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HZ_BEAN".
*/
public class HzBeanDao extends AbstractDao<HzBean, Long> {

    public static final String TABLENAME = "HZ_BEAN";

    /**
     * Properties of entity HzBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Old = new Property(4, String.class, "old", false, "OLD");
        public final static Property Telphone = new Property(5, String.class, "telphone", false, "TELPHONE");
        public final static Property Brithday = new Property(6, long.class, "brithday", false, "BRITHDAY");
        public final static Property Sheng = new Property(7, String.class, "sheng", false, "SHENG");
        public final static Property Shi = new Property(8, String.class, "shi", false, "SHI");
        public final static Property Qu = new Property(9, String.class, "qu", false, "QU");
        public final static Property IdCard = new Property(10, String.class, "idCard", false, "ID_CARD");
        public final static Property Bq = new Property(11, String.class, "bq", false, "BQ");
    }


    public HzBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HzBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HZ_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"NAME\" TEXT," + // 1: name
                "\"NUMBER\" TEXT," + // 2: number
                "\"SEX\" TEXT," + // 3: sex
                "\"OLD\" TEXT," + // 4: old
                "\"TELPHONE\" TEXT," + // 5: telphone
                "\"BRITHDAY\" INTEGER NOT NULL ," + // 6: brithday
                "\"SHENG\" TEXT," + // 7: sheng
                "\"SHI\" TEXT," + // 8: shi
                "\"QU\" TEXT," + // 9: qu
                "\"ID_CARD\" TEXT," + // 10: idCard
                "\"BQ\" TEXT);"); // 11: bq
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HZ_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HzBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String old = entity.getOld();
        if (old != null) {
            stmt.bindString(5, old);
        }
 
        String telphone = entity.getTelphone();
        if (telphone != null) {
            stmt.bindString(6, telphone);
        }
        stmt.bindLong(7, entity.getBrithday());
 
        String sheng = entity.getSheng();
        if (sheng != null) {
            stmt.bindString(8, sheng);
        }
 
        String shi = entity.getShi();
        if (shi != null) {
            stmt.bindString(9, shi);
        }
 
        String qu = entity.getQu();
        if (qu != null) {
            stmt.bindString(10, qu);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(11, idCard);
        }
 
        String bq = entity.getBq();
        if (bq != null) {
            stmt.bindString(12, bq);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HzBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String old = entity.getOld();
        if (old != null) {
            stmt.bindString(5, old);
        }
 
        String telphone = entity.getTelphone();
        if (telphone != null) {
            stmt.bindString(6, telphone);
        }
        stmt.bindLong(7, entity.getBrithday());
 
        String sheng = entity.getSheng();
        if (sheng != null) {
            stmt.bindString(8, sheng);
        }
 
        String shi = entity.getShi();
        if (shi != null) {
            stmt.bindString(9, shi);
        }
 
        String qu = entity.getQu();
        if (qu != null) {
            stmt.bindString(10, qu);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(11, idCard);
        }
 
        String bq = entity.getBq();
        if (bq != null) {
            stmt.bindString(12, bq);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HzBean readEntity(Cursor cursor, int offset) {
        HzBean entity = new HzBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // old
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // telphone
            cursor.getLong(offset + 6), // brithday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sheng
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shi
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // qu
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // idCard
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // bq
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HzBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOld(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTelphone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBrithday(cursor.getLong(offset + 6));
        entity.setSheng(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShi(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQu(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIdCard(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBq(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HzBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HzBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HzBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
